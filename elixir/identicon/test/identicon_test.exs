defmodule IdenticonTest do
  use ExUnit.Case

  @hash_list [145, 46, 200, 3, 178, 206, 73, 228, 165, 65, 6, 141, 73, 90, 181, 112]

  @colour {145, 46, 200}

  @grid [
    {145, 0},
    {46, 1},
    {200, 2},
    {46, 3},
    {145, 4},
    {3, 5},
    {178, 6},
    {206, 7},
    {178, 8},
    {3, 9},
    {73, 10},
    {228, 11},
    {165, 12},
    {228, 13},
    {73, 14},
    {65, 15},
    {6, 16},
    {141, 17},
    {6, 18},
    {65, 19},
    {73, 20},
    {90, 21},
    {181, 22},
    {90, 23},
    {73, 24}
  ]

  @filtered_grid [
    {46, 1},
    {200, 2},
    {46, 3},
    {178, 6},
    {206, 7},
    {178, 8},
    {228, 11},
    {228, 13},
    {6, 16},
    {6, 18},
    {90, 21},
    {90, 23}
  ]

  @pixel_map [
    {{50, 0}, {100, 50}},
    {{100, 0}, {150, 50}},
    {{150, 0}, {200, 50}},
    {{50, 50}, {100, 100}},
    {{100, 50}, {150, 100}},
    {{150, 50}, {200, 100}},
    {{50, 100}, {100, 150}},
    {{150, 100}, {200, 150}},
    {{50, 150}, {100, 200}},
    {{150, 150}, {200, 200}},
    {{50, 200}, {100, 250}},
    {{150, 200}, {200, 250}}
  ]

  @image %Identicon.Image{
    hex: @hash_list,
    colour: nil,
    pixel_map: nil
  }

  @image_with_colours %Identicon.Image{
    hex: @hash_list,
    colour: @colour,
    pixel_map: nil
  }

  @image_with_colours_and_grids %Identicon.Image{
    hex: @hash_list,
    colour: @colour,
    grid: @grid,
    pixel_map: nil
  }

  @image_with_filtered_grid %Identicon.Image{
    hex: @hash_list,
    colour: @colour,
    grid: @filtered_grid,
    pixel_map: nil
  }

  @image_with_pixel_map %Identicon.Image{
    hex: @hash_list,
    colour: @colour,
    grid: @filtered_grid,
    pixel_map: @pixel_map
  }

  test "returns the input" do
    assert Identicon.main("asdf") == :ok
  end

  test "hashes the input" do
    assert Identicon.hash_input("asdf") == @image
  end

  test "picks a colour" do
    assert Identicon.pick_colours(@image) == @image_with_colours
  end

  test "builds a grid" do
    assert Identicon.build_grid(@image_with_colours) == @image_with_colours_and_grids
  end

  test "mirrors a list" do
    assert Identicon.mirror_row([1, 2, 3]) == [1, 2, 3, 2, 1]
  end

  test "filters a grid by odd squares" do
    assert Identicon.filter_odd_squares(@image_with_colours_and_grids) ==
             @image_with_filtered_grid
  end

  test "builds a pixel map" do
    assert Identicon.build_pixel_map(@image_with_filtered_grid) === @image_with_pixel_map
  end

  test "creates the identicon" do
    assert Identicon.draw_image(@image_with_pixel_map) == "\x89PNG\r\n\x1A\n\0\0\0\rIHDR\0\0\0\xFA\0\0\0\xFA\b\x02\0\0\0\a\x8E\xCDj\0\0\a\vIDATx\x9C\xED\x92\xC1\r\x02\0\f\x84\x9C\xC8]\xDDʭt\x81\xFB\x99\x06Ih\x18\xA0\xE1x|\xFE\xF2^\xCFwء#\x1A\xF7\xA0\x1F؇O\x15\xBFCG4\xAE\xDC\xE3\n:\xA2q\xE5\x1EW\xD0\x11\x8D+\xF7\xB8\x82\x8Eh\\\xB9\xC7\x15tD\xE3\xCA=\xAE\xA0#\x1AW\xEEq\x05\x1DѸr\x8F+\xE8\x88ƕ{\\AG4\xAE\xDC\xE3\n:\xA2q\xE5\x1EW\xD0\x11\x8D+\xF7\xB8\x82\x8Eh\\\xB9\xC7\x15tD\xE3\xCA=\xAE\xA0#\x1AW\xEEq\x05\x1DѸr\x8F+\xE8\x88ƕ{\\AG4\xAE\xDC\xE3\n:\xA2q\xE5\x1EW\xD0\x11\x8D+\xF7\xB8\x82\x8Eh\\\xB9\xC7\x15tD\xE3\xCA=\xAE\xA0#\x1AW\xEEq\x05\x1DѸr\x8F+\xE8\x88ƕ{\\AG4\xAE\xDC\xE3\n:\xA2q\xE5\x1EW\xD0\x11\x8D+\xF7\xB8\x82\x8Eh\\\xB9\xC7\x15tD\xE3\xCA=\xAE\xA0#\x1AW\xEEq\x05\x1DѸr\x8F+\xE8\x88ƕ{\\AG4\xAE\xDC\xE3\n:\xA2q\xE5\x1EW\xD0\x11\x8D+\xF7\xB8\x82\x8Eh\\\xB9\xC7\x15tD\xE3\xCA=\xAE\xA0#\x1AW\xEEq\x05\x1DѸr\x8F+\xE8\x88ƕ{\\AG4\xAE\xDC\xE3\n:\xA2q\xE5\x1EW\xD0\x11\x8D+\xF7\xB8\x82\x8Eh\\\xB9\xC7\x15tD\xE3\xCA=\xAE\xA0#\x1AW\xEEq\x05\x1DѸr\x8F+\xE8\x88ƕ{\\AG4\xAE\xDC\xE3\n:\xA2q\xE5\x1EW\xD0\x11\x8D+\xF7\xB8\x82\x8Eh\\\xB9\xC7\x15tD\xE3\xCA=\xAE\xA0#\x1AW\xEEq\x05\x1DѸr\x8F+\xE8\x88ƕ{\\AG4\xAE\xDC\xE3\n:\xA2q\xE5\x1EW\xD0\x11\x8D+\xF7\xB8\x82\x8Eh\\\xB9\xC7\x15tD\xE3\xCA=\xAE\xA0#\x1AW\xEEq\x05\x1DѸr\x8F+\xE8\x88ƕ{\\AG4\xAE\xDC\xE3\n:\xA2q\xE5\x1EW\xD0\x11\x8D+\xF7\xB8\x82\x8Eh\\\xB9\xC7\x15tD\xE3\xCA=\xAE\xA0#\x1AW\xEEq\x05\x1DѸr\x8F+\xE8\x88ƕ{\\AG4\xAE\xDC\xE3\n:\xA2q\xE5\x1EW\xD0\x11\x8D+\xF7\xB8\x82\x8Eh\\\xB9\xC7\x15tD\xE3\xCA=\xAE\xA0#\x1AW\xEEq\x05\x1DѸr\x8F+\xE8\x88ƕ{\\AG4\xAE\xDC\xE3\n:\xA2q\xE5\x1EW\xD0\x11\x8D+\xF7\xB8\x82\x8Eh\\\xB9\xC7\x15tD\xE3\xCA=\xAE\xA0#\x1AW\xEEq\x05\x1DѸr\x8F+\xE8\x88ƕ{\\AG4\xAE\xDC\xE3\n:\xA2q\xE5\x1EW\xD0\x11\x8D+\xF7\xB8\x82\x8Eh\\\xB9\xC7\x15tD\xE3\xCA=\xAE\xA0#\x1AW\xEEq\x05\x1DѸr\x8F+\xE8\x88ƕ{\\AG4\xAE\xDC\xE3\n:\xA2q\xE5\x1EW\xD0\x11\x8D+\xF7\xB8\x82\x8Eh\\\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\\x95\xBB~B܉\xC8U\xB9\xEB'ĝ\x88\\}\x01\xD7\xE3\xEC\x04h;\x91\xB7\0\0\0\0IEND\xAEB`\x82"
  end
end
